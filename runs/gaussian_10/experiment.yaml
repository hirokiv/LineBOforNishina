algorithm:
  noise_model_config: {}
  noise_model:
  constraints_model_config: {}
  constraints_model:
  model_config: {}
  model: febo.models.gp.GP
algorithm.nelder_mead:
  contraction_factor: 0.3
algorithm.rembo:
  interleaved_runs: 4
  emb_d: 2  # subspace dimension
algorithm.subdomainbo:
  acquisition: febo.algorithms.subdomainbo.acquisition.ucb
  plot_every_step: false
  plot: false
  tr_method: grad
  tr_radius: 0.1
  max_queries_tr: 2*d
  min_queries_tr: d
  max_queries_line: 15
  min_queries_line: 10
controller:
  best_predicted_every: 1  # Do .best_predict() on every n-th timestep, if set to 0, don't evaluate .best_predict()
  T: 1000  # Horizon
  repetitions: 10  # Number of repetitions each experiment is run.
environment.benchmark:
  aug_d: 10
  dimension: 10
  noise_obs_mode: none  # Can be set to "full", "evaluation" or "hidden".
  noise_function: 0.2
environment.benchmark.gaussian:
  initial_value: 0.2
experiment.multi:
  label: febo.labels.algorithm_name
  multi_controller: febo.controller.multi.RepetitionController
  iterator:
  - experiment.simple:algorithm: febo.algorithms.RandomLineBO
    models.gp:kernels:
    - - GPy.kern.RBF
      - variance: 1.0
        lengthscale: 0.4
        ARD: false
  - experiment.simple:algorithm: febo.algorithms.CoordinateLineBO
    models.gp:kernels:
    - - GPy.kern.RBF
      - variance: 1.0
        lengthscale: 0.4
        ARD: false
  - experiment.simple:algorithm: febo.algorithms.AscentLineBO
    models.gp:kernels:
    - - GPy.kern.RBF
      - variance: 1.0
        lengthscale: 0.4
        ARD: false
  - experiment.simple:algorithm: febo.algorithms.NelderMead
  - experiment.simple:algorithm: febo.algorithms.Random
  - experiment.simple:algorithm: febo.algorithms.UCB
    models.gp:kernels:
    - - GPy.kern.RBF
      - variance: 1.0
        lengthscale: 0.2
        ARD: false
  - experiment.simple:algorithm: febo.algorithms.spsa.SPSA
  - experiment.simple:algorithm: febo.algorithms.cmaes.CMAES
  fixed_environment: false  # If true, only one environment for the whole batch will be created. Use this, if you randomly genrate your environment, but the whole batch should use the same random instance of the environment.
experiment.simple:
  algorithm: febo.algorithms.Random
  environment: febo.environment.benchmarks.functions.Gaussian
  controller: febo.controller.simple.SimpleController
main:
  experiment_dir: runs/
  log_level_file: INFO
  log_level_console: INFO
  modules:
  - febo.experiment.MultiExperiment
  - febo.experiment.SimpleExperiment
  - febo.controller.SequentialController
  - febo.controller.RepetitionController
  - febo.controller.SimpleController
  - febo.controller.PlottingController
  - febo.algorithms.UCB
  - febo.algorithms.Algorithm
  - febo.algorithms.rembo.Rembo
  - febo.algorithms.rembo.InterleavedRembo
  - febo.algorithms.spsa.SPSA
  - febo.algorithms.cmaes.CMAES
  - febo.algorithms.safeopt.SafeOpt
  - febo.algorithms.subdomainbo.SubDomainBO
  - febo.algorithms.subdomainbo.safeopt.SafeOptConfigMixin
  - febo.algorithms.NelderMead
  - febo.environment.benchmarks.BenchmarkEnvironment
  - febo.environment.benchmarks.functions.Gaussian
  - febo.environment.benchmarks.subspace.AugmentedDimensionMixinConfig
  - febo.solvers.GridSolver
  - febo.solvers.ScipySolver
  - febo.models.gp.GP
  - febo.solvers.ScipySolver
  experiment: febo.experiment.MultiExperiment  # Experiment
model:
  beta: 4
models.gp:
  calculate_gradients: true  # Enable/Disable computation of gradient on each update.
  noise_var: 0.04
  kernels:
  - - GPy.kern.RBF
    - variance: 1.0
      lengthscale: 0.1
      ARD: false
solver.grid:
  points_per_dimension: 300
solver.scipy:
  convergence_warnings: true
  sync_restarts: true
  num_processes: 1
  num_restart: 50
  lbfgs_maxfun: 1000
  lbfgs_use_gradients: false
